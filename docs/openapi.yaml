openapi: 3.0.0
info:
  title: Khatm API
  description: |
    ## Authentication
    Khatm will only support SSO, relying on 3rd party services to maintain security, while reducing the need to manage authentication flows such as verifying emails or encrypting and storing passwords.
    The client application will send the service's SSO information to the Khatm API as a `UserAuthentication`.
    The response will be a `User` and JWT token which will need to be set in the headers of subsequent API calls.
    If a user has the same email information between SSO services, the system will tie the `UserAuthentication`s to that user, and user will be able to login to same account using both SSO services.

    ## Challenges
    Moderators create `Challenge`s. A challenge has a `book` that contains metadata regarding what type of challenge this is.
    Based on the type of book (quran, dhikr, etc), the `totalParts` will mean something different
    - If `quran` then there will be 30 totalParts for each Juuz.
    - Otherwise the totalParts will be the the total count the moderator wishes to achieve. i.e. 30,000 Kalimahs

    ## Books
    Books are the types of khatm challenges that a moderator can create.
    These will be created by Admins and have `slugId`s so can be identified. These are long-living objects that are going to be referenced by `Challenge`s in a one-to-many relationship.
    One of the first type of `Book`s will be the Quran. Other types of Books would be one for each Dhikr. Books can contain extra information such as the value of the dhikr, and historical or spiritual context.

    ## Intentions
    Users commit to a challenge through an `Intention` that they create.
    There can be only one `active` intention per user per challenge. Users can have one Intention in multiple Challenges.
    The `parts` property of an Intention plays two roles based on the book.type,
    - If `quran` then parts will be the index of which Juuz.
    - Otherwise the totalParts will be the the number of recitations the User has Intentioned

    ## State Machines
    Objects such as `ChallengeState` and `IntentionState` are a way of tracking the state change of objects, and when that state has changed.
    This makes it easy to track history of events in the system.
  version: 1.0.0
servers:
  - url: 'http://api.khatmapp.com/v1'
paths:
  /sessions:
    post:
      description: |
        # Get a session token for user
        1. If the user exists, will get back JWT token and `User`
        1. If the user doesn't exist, will create `User` and return it with JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthentication'
      responses:
        '200':
          description: A JSON of the session token
          content:
            application:json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type : integer
    get:
      description: Get User
      responses:
        '200':
          description: A JSON of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}/pushtokens:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type : integer
    post:
      description: Add push token for user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPushToken'
      responses:
        '201':
          description: Created
  /users/{userId}/statistics:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type : integer
    get:
      description: Get User Statistics
      responses:
        '200':
          description: A JSON of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatistics'
  /settings/{version}:
    get:
      description: |
        # Get Settings
        Send `version` of last settings sync to receive back shorter responses for better performance.
      parameters:
        - name: version
          in: path
          required: false
          schema:
            type : integer
      responses:
        '204':
          description: No changes according to the requested `version`
        '200':
          description: A JSON of constants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
  /books:
    summary: Book CRUD
    get:
      description: Get Books
      responses:
        '200':
          description: A JSON of a challenge
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /challenges:
    summary: Challenge CRUD
    get:
      description: Get Challenge
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type : integer
      responses:
        '200':
          description: A JSON of a challenge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
    post:
      description: |
        Create Challenge
        ## Notes
        - Instead of sending the entire `book` information, just need the `slugId`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Challenge'
      responses:
        '201':
          description: Created
    put:
      description: Update Challenge
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type : integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Challenge'
      responses:
        '205':
          description: Updated
  /challenges/{challengeId}/intentions:
    summary: Challenge Intention CRUD
    parameters:
      - name: challengeId
        in: path
        required: true
        schema:
          type : integer
    get:
      description: Get Intention
      parameters:
        - name: intentionId
          in: path
          required: true
          schema:
            type : integer
      responses:
        '200':
          description: A JSON of an Intention
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Intention'
    post:
      description: Create Intention for Challenge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Intention'
      responses:
        '201':
          description: Created
    put:
      description: Update Intention
      parameters:
        - name: intentionId
          in: path
          required: true
          schema:
            type : integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Intention'
      responses:
        '205':
          description: Updated
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        statistics:
          $ref: '#/components/schemas/UserStatistics'
    UserAuthentication:
      description: Identity objects for various SSO services
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        uuid:
          description: The SSO service's stable unique identifier for the user
          type: string
        email:
          type: string
        platform:
          type: integer
          description: android, apple
    UserStatistics:
      description: Track metrics on a user
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        intentionsCreated:
          type: integer
        intentionsFinished:
          type: integer
        intentionsAborted:
          type: integer
        challengesContributed:
          type: integer
        challengesModerated:
          type: integer
    UserPushToken:
      description: Push Notification token information for a user
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
        platform:
          type: string
          description: apns, gcm
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
    Challenge:
      description: Challenge object
      type: object
      properties:
        id:
          type: integer
        moderator:
          $ref: '#/components/schemas/User'
        book:
          $ref: '#/components/schemas/Book'
        currentState:
          $ref: '#/components/schemas/ChallengeState'
        completeAt:
          type: string
          format: date-time
        totalParts:
          type: integer
    ChallengeState:
      description: State Machine for Challenges
      type: object
      properties:
        id:
          type: integer
        challenge:
          $ref: '#/components/schemas/Challenge'
        state:
          type: string
          description: active, finished
        createdAt:
          type: string
          format: date-time
    Intention:
      description: Intention created by a user when they commit to a challenge
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        challenge:
          $ref: '#/components/schemas/Challenge'
        user:
          $ref: '#/components/schemas/User'
        currentState:
          $ref: '#/components/schemas/IntentionState'
        parts:
          type: integer
    IntentionState:
      description: State Machine for Intentions
      type: object
      properties:
        id:
          type: integer
        intention:
          $ref: '#/components/schemas/Intention'
        state:
          type: string
          description: active, achieved, aborted
        createdAt:
          type: string
          format: date-time
    Book:
      description: Religious text
      type: object
      properties:
        id:
          type: integer
        slugId:
          type: string
        type:
          type: integer
          description: quran, dhikr, salwaat
        title:
          type: string
    Settings:
      description: App Settings
      type: object
      properties:
        version:
          type: integer
          default: 1
